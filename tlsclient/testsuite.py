# -*- coding: utf-8 -*-
"""Module containing the test suite
"""
import pickle
import tlsclient.tls_message as msg
import tlsclient.constants as tls
from tlsclient.recorder import RecorderState

class TestSuite(object):
    def __init__(self, logger, server_profile, client_profile_factory):
        self.logger = logger
        self.server_profile = server_profile
        self.create_client_profile = client_profile_factory

    def run(self):
        print("Ok, we run")

        client_profile = self.create_client_profile()
        client_profile.tls_versions = [tls.Version.TLS12]
        client_profile.cipher_suites = [
            # tls.CipherSuite.TLS_AES_128_GCM_SHA256,
            # tls.CipherSuite.TLS_CHACHA20_POLY1305_SHA256,
            # tls.CipherSuite.TLS_AES_256_GCM_SHA384,
            # tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
            # tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
            # tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
            # tls.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
            # tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
            # tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
            tls.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            # tls.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256,
            # tls.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384,
            tls.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA,
            tls.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA,
            tls.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
            tls.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
        ]
        client_profile.supported_groups = [
            tls.SupportedGroups.X25519,
            tls.SupportedGroups.SECP256R1,
            tls.SupportedGroups.SECP384R1,
            tls.SupportedGroups.SECP521R1,
            tls.SupportedGroups.FFDHE2048,
            tls.SupportedGroups.FFDHE4096,
        ]
        client_profile.signature_algorithms = [
            tls.SignatureScheme.ECDSA_SECP256R1_SHA256,
            tls.SignatureScheme.ECDSA_SECP384R1_SHA384,
            tls.SignatureScheme.ECDSA_SECP521R1_SHA512,
            tls.SignatureScheme.RSA_PSS_RSAE_SHA256,
            tls.SignatureScheme.RSA_PSS_RSAE_SHA384,
            tls.SignatureScheme.RSA_PSS_RSAE_SHA512,
            tls.SignatureScheme.RSA_PKCS1_SHA256,
            tls.SignatureScheme.RSA_PKCS1_SHA384,
            tls.SignatureScheme.RSA_PKCS1_SHA512,
            tls.SignatureScheme.ECDSA_SHA1,
            tls.SignatureScheme.RSA_PKCS1_SHA1,
        ]

        with client_profile.create_connection() as conn:

            #recorder =  pickle.loads(b'\x80\x03ctlsclient.recorder\nRecorder\nq\x00)\x81q\x01}q\x02(X\x06\x00\x00\x00_stateq\x03ctlsclient.recorder\nRecorderState\nq\x04K\x01\x85q\x05Rq\x06X\x0c\x00\x00\x00_msg_sendallq\x07]q\x08(ctlsclient.protocol\nProtocolData\nq\tC\x84\x16\x03\x01\x00\x7f\x01\x00\x00{\x03\x03_f\x0b\xb9\xee\xc4\x03\xb4\xc9\xae\x19|Co\x01o-\x8ea\xb0\x87u!\xb3\x01\xce\xcf\xeb\xd8P\x9f\xa0\x00\x00\x12\xc0\n\xc0#\xc0\t\xc0\x13\xc0\x14\x00/\x005\x00\n\xc0\'\x01\x00\x00@\x00\x00\x00\x0e\x00\x0c\x00\x00\tlocalhost\x00\n\x00\x0e\x00\x0c\x00\x1d\x00\x17\x00\x18\x00\x19\x01\x00\x01\x02\x00\r\x00\x18\x00\x16\x04\x03\x05\x03\x06\x03\x08\x04\x08\x05\x08\x06\x04\x01\x05\x01\x06\x01\x02\x03\x02\x01q\n\x85q\x0bRq\x0c}q\rbh\tC\x85\x16\x03\x03\x00%\x10\x00\x00! \x13\x14e\xd1;W\xee\xd9F\x00\x97\xca\x05\x90\x9e\x16]\xbc\xc3\x16\x98t\xda\x02\xde\xe4yW\xf8+\xdeD\x14\x03\x03\x00\x01\x01\x16\x03\x03\x00P\xb5F!\x0ed\xd2\x10H\x8e\xf8s\x8e\x00\x00\x00\x00\xb6\xdf\xbf\xac\xd19u\rS\xb5L\\\x17\x7f\xcd\xc5\xbd\xc3\xcc\xf9\xc3,\x9c<%\x96\xedN\xf2\x93\xcb)\xe4\x9aH\xbe\xd2\x10er\x98\x8fW\x87z\x8e@%\x87\xbf\x80\x94\x83\x91\xbe\xbb\x15\xc1\x88L\xfd\x8b\xb7\x90q\x0e\x85q\x0fRq\x10}q\x11bh\tCU\x17\x03\x03\x00P\xb5F!\x0ed\xd2\x10H\x8e\xf8s\x8e\x00\x00\x00\x01Wp\xaa[t\x81\x80\xcb\xe3\x81\xec<\x0e\xcc\x0bk\xcaN\xe6\'58\x81\xben\xa1ptR\xb8Y\x7f\xb0\n\xed%\xce\xb9\x96\x175\x1b\xf0\x83\x9a\'\x0b\xc2\xdfCp\x97i\x94\xbe\xbe\xed>\xa3\xfbq3\xf5\xf7q\x12\x85q\x13Rq\x14}q\x15beX\t\x00\x00\x00_msg_recvq\x16]q\x17(B\x8f\x05\x00\x00\x16\x03\x03\x00J\x02\x00\x00F\x03\x03i\xa0\xe0\xe8IV\'\xcf\xc1\n\xeb\xe87\\+\x00C6&\xfdWS\xdb}\xe9u\x1e\xa8?.a( 3t\xcf\r\xc3\xc4\xbf!\x8f\x07\x05\x9d\xe5\xb4\xcc\x06rM\x95\xb5\xf7\xdaZ\xab\xa2\x9f\xa9Sj\xb9\x17\x02\xc0\'\x00\x16\x03\x03\x04\x01\x0b\x00\x03\xfd\x00\x03\xfa\x00\x03\xf70\x82\x03\xf30\x82\x02\xdb\xa0\x03\x02\x01\x02\x02\x14fC\x9d\x04>U\x0f\x7f\xde\xac_\xef\x8bj\x84\x1cX:\xca\x120\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\x000\x81\x881\x0b0\t\x06\x03U\x04\x06\x13\x02DE1\x100\x0e\x06\x03U\x04\x08\x0c\x07Germany1\r0\x0b\x06\x03U\x04\x07\x0c\x04Tamm1\x130\x11\x06\x03U\x04\n\x0c\nguballa.de1\x0f0\r\x06\x03U\x04\x0b\x0c\x06Privat1\x120\x10\x06\x03U\x04\x03\x0c\tlocalhost1\x1e0\x1c\x06\t*\x86H\x86\xf7\r\x01\t\x01\x16\x0fjens@guballa.de0\x1e\x17\r200905133359Z\x17\r210905133359Z0\x81\x881\x0b0\t\x06\x03U\x04\x06\x13\x02DE1\x100\x0e\x06\x03U\x04\x08\x0c\x07Germany1\r0\x0b\x06\x03U\x04\x07\x0c\x04Tamm1\x130\x11\x06\x03U\x04\n\x0c\nguballa.de1\x0f0\r\x06\x03U\x04\x0b\x0c\x06Privat1\x120\x10\x06\x03U\x04\x03\x0c\tlocalhost1\x1e0\x1c\x06\t*\x86H\x86\xf7\r\x01\t\x01\x16\x0fjens@guballa.de0\x82\x01"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x000\x82\x01\n\x02\x82\x01\x01\x00\xb2\xc8oZ\xe5\x1b\xbeM\xc4\x82,f\xbfU\xfa<R~\x93\xc7\xc6\xcb\xa6\xcf{&_\xb4\xb0S\x80\xb3x\xea6r}\x80\x8b\xad\xc5\xbe\x98\x1a\xd6\xd6\xdc\xa00\x91\x0c\xe2h\x80D\x94\\\x01<\xaa\xebmg\\cZ\x1b:H\xea\xec9\xc3Y\x9c\xca`\x196i\xbb\xbe\x1f\xae\xc3\xb9x\xc9\x82\xa1\xba\x17\x08\x17\xb6\xe1\x16\xae\xabq\xe9\xbaj\x84\xcd\xc4\xc7A\xb3.\t\xd7\xe1\xa8\x1b\xe3\x7fO\x03\xac\xddKy\x81*\xce\xa8r5\xc5L\xf5\x06x\x18GF#H5\xff\x0b\xf2\\`\xe3\x1a\xde\n\t\x02\xcf\\\x0b\xe3%\x14!o\xd2\x92*\x11\x8eO\xaaY\xb4bu\x8e`u\xc8\xa1%*\x93\x83\xf7C\xcf\xc6\xb8\xb33\xa5<\xf7\x9aQ-\xb9\xdf\xdc\x14\x17\x15G?\x8dC\x13\xfc\x8132\x92*\x08=\xae"\x06\xfe\x01\xea\t\xbb\x93,\x04"\xa3\xe3\xc4\nu\xe9\x17\xb1\x98j\x9e\x02\xf06\xaf\x07^\x00&\x10\xc6>\x95\xbe\xfb-/|\xdd\xd2\xb4~G\x02\x03\x01\x00\x01\xa3S0Q0\x1d\x06\x03U\x1d\x0e\x04\x16\x04\x14 \xfe,\xe5U9\xf7\x86(\'\x80%eg\x16=|\xa5`\x8a0\x1f\x06\x03U\x1d#\x04\x180\x16\x80\x14 \xfe,\xe5U9\xf7\x86(\'\x80%eg\x16=|\xa5`\x8a0\x0f\x06\x03U\x1d\x13\x01\x01\xff\x04\x050\x03\x01\x01\xff0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x96}\xb2\xfdY\xb4t\x1b#\x00 \x0eJ\xf7*\xe0q|\xe1\xd2\x04Aj-\xf0G\x91\xb0\xf3G\xb0\xedB\xc9\xbe\xeb c\xed\x99[\x10\x1e\xad\xafw\x03@S\x93\xd7\xed\xa1\x91*\xa6\xa6\x0e\xd6\x02\xc4\xf6G\xf8{\r\xbeT\x91\x91\xf9@\xeb\xa9H\x1f\xb7l$K\x05\\\xd5\x16h\xdem\x92\n^zkf\xa1\xed\xcc\x9a6D\xcf9\xd1\xbf\xc5C\xc1h\\\xe4\xe1\x1f\xf04Nm\xc2g\x0e\x90\x9b\xb4\x11\xa7Sr\xdc\xbe \xaf\x92\x05\xf9\xc6\xe7{\xad\x80\xe3\xa2\xb0\xa1vR\xc3\x91\xb2|<\xd3\x12Z\xa3\xa8`#K\x86?\xb3`\xa2-\x93\xfdR\x13\x00\xed\xb1B\x0c\xe7\x1de\x103K=0T\xa4\x98V\xe4\xd2\x0f>o:\xcaN\xcd\xfc\x11bU\xa1F%\x17\xa2) \xd2\x8cq\x80\xc1\xa4\x9c\x9e\xf0\x9fz\x1b\xa2\xd85\xb3\xf3\xa2\xf1\xd5\xe7{\x00\x15\x90A\x17\xaa\tP\x91u\x0eB\\u\xee\xcb\x86;7s0\xb0\x1e\x98\xfa"\x9c\xfe\xc9Oe\x16\x03\x03\x01,\x0c\x00\x01(\x03\x00\x1d Xo\xf03&k\xc6\xe1\xde\x9a\xb7\xfc\xa6\x01\x9f\xe9]e\x1a\x88OF\xbb\x1b\xf1\x15\xb1\xb7\x0b\x08\xe8J\x08\x04\x01\x00,N\xae0,\xd4L<\x14\x9bj\xde!\xc6\x11\xf7\xc0\xc1\x15\x11\xf3\xd8\x93?J\xf8vev\x9fF>\xf4\xdc\x11t\x86\xb2\x1a\xbaL=om\xf8y\xb9&\x9a\n[\xd1\xb4r\xc3\x97\xc29^t\xa6\x8f\xed@\xf2b\x9f]\xd5\x91\xf5\xdf\xceZW\x0bA2\xa0\x85\x93\xb0\xf5,(\xd2f\xba\x10\xc6\x85\xd4\x14{ Z\xee\x86T\x82\x8cW\xfc<\xb5\x83\xbe\x90a\x91!\x90\xb1Y\x89c\x0c\xc6d\xa7\xc5\xaak\xc2\xae\x9d^\xf9\x7f>\xef\n\xca\xad\x9d;\xf1\xfd\xa6J\x14\x11&\x8b\xac*x\x95+\xaf\x11u=\xd2ED\x8d:\xec\xe4\xf5\x1b\xde@\xac|B\xca,\xe6nhG\x10X\x0f^\xda\xd0vk\n\xd1g\x8e\x0e\xf2C\xb0\x15g\x98\x1dl\xd7\xeb\xd5\x08\xd5\t\x1e-\x86\xe2\xcb\xf7\xacO\x99\x99\xf3\xb5\x8eZFu\xa5(\xa4\xb66>*\xa1\xed\xa7\xa7\xe4:\xd3Ep\x08\xd0\xdf\x86\x83\x16\xec\x0fs\x8f\xc6\x08\xf3t\x8f\x13\x97E-\xa4qf\xb7x\x16\x03\x03\x00\x04\x0e\x00\x00\x00q\x18C[\x14\x03\x03\x00\x01\x01\x16\x03\x03\x00P\x863o\xc9\x80P\x85Y\xb0\xf7\xf6\xff\xcc\x07FX\x87\xa5\xf6\xb2\xfbw\xef\x9f\xd8\x1b\xf3W\x95\xed\xe1\x92\xaf\x81\xa9\x81c\xfft\xb1)\xeb\xbf\xf2\x1f\xa7\xd4\x0bs8\x02\xc3\xea$\xc0jc\x13)\xae/\x88\xf9\xd0w\xca\xd5tC\x80\xee\xf8.v~J4&[\x84q\x19eX\r\x00\x00\x00client_randomq\x1ah\tC _f\x0b\xb9\xee\xc4\x03\xb4\xc9\xae\x19|Co\x01o-\x8ea\xb0\x87u!\xb3\x01\xce\xcf\xeb\xd8P\x9f\xa0q\x1b\x85q\x1cRq\x1d}q\x1ebX\r\x00\x00\x00server_randomq\x1fNX\x11\x00\x00\x00pre_master_secretq NX\r\x00\x00\x00master_secretq!C0\x96\x88{\xbf\xf1\x91\xbe\x81-i\x07\xff\x9c\xab\xf6\x13ox\x03\x02\xf2)S\xc75&\xe7-\x94k\x18Z\x13\x8ar\xfb\xb7\xdcH*\xfd\x11V\x8aX!\x93\x05q"X\x0b\x00\x00\x00private_keyq#C \x10\xc5\xe3\x88?i\x19\x99\xda\xf5\xf9\xb6zL\xff\xf7\xca\xefW\x95\xceE\xf3\xe0p\xcc\x96\xe9_\x83"zq$X\x14\x00\x00\x00client_write_mac_keyq%h\tC \xdbf\x0c-\x85Q}/\xebG\xfe\x11}S}\x94\xdf\xafp\xb3Fp\xa4,\xfeC\xb4\xd1d\xdaJJq&\x85q\'Rq(}q)bX\x14\x00\x00\x00server_write_mac_keyq*h\tC \xb1JK\xe0\x84\xf3\x95O\xe7\xb9N\xa4(\x94Q\xa8(\xa2\xf6\xb1M\xd70\xf9\xf6\x00\xb2\\_9BPq+\x85q,Rq-}q.bX\x10\x00\x00\x00client_write_keyq/h\tC\x10\xa2\xca{\x90v\xf5\xe5"\x93\x1cW\xbbP\xce\x8b\xc4q0\x85q1Rq2}q3bX\x10\x00\x00\x00server_write_keyq4h\tC\x10\xe7\t\x87\xd2\x85\x12\xabtG\xec\xefo\xf7\xc9f\x8fq5\x85q6Rq7}q8bX\x0f\x00\x00\x00client_write_ivq9h\tC\x10\xb5F!\x0ed\xd2\x10H\x8e\xf8s\x8e$6\xe5\xf7q:\x85q;Rq<}q=bX\x0f\x00\x00\x00server_write_ivq>h\tC\x10\xb7R3\xdd \x9f"\xecX\x87\xa9\xc5v\x1c\x91Tq?\x85q@RqA}qBbX\x18\x00\x00\x00verify_data_finished_recqCcbuiltins\nbytearray\nqDC\x0c%L\xa6\xb0\x9bk/uO\xc7\xf8GqE\x85qFRqGX\x19\x00\x00\x00verify_data_finished_calcqHC\x0c%L\xa6\xb0\x9bk/uO\xc7\xf8GqIX\x17\x00\x00\x00msg_digest_finished_recqJC \x8d\xd26\xa6\xf6\xdb\xad"\xc4E7\xdeo\x82\x85\xea7\x99_\xa1\xd9\xf0B\xd8,\xab\x0bc/{\x8f\x9cqKX\x18\x00\x00\x00msg_digest_finished_sentqLC \xe6\x86\x02\x1f0\xbdL\xab\xe9\x96\x1b\xcd\xbe\xd5\xed\xd6\xa6A\xb7\x978\xa3\x88\x1f.S\x1f\x03\xfa=\x97\x05qMX\x19\x00\x00\x00verify_data_finished_sentqNC\x0c\xc2\xe2\x16\xb8Bk\x1af.\x9f2[qOub.')
            #conn.set_recorder(recorder)
            #conn.recorder.replay()

            #conn.recorder.record()

            # conn.open_socket()
            conn.send(msg.ClientHello)
            conn.wait(msg.ServerHello)
            conn.wait(msg.Certificate, optional=True)
            conn.wait(msg.ServerKeyExchange, optional=True)
            conn.wait(msg.ServerHelloDone)
            conn.send(msg.ClientKeyExchange, msg.ChangeCipherSpec, msg.Finished)
            conn.wait(msg.ChangeCipherSpec)
            conn.wait(msg.Finished)
            conn.send(msg.AppData(b"Hier kommen Daten!"))

            #print(pickle.dumps(conn.recorder))


            # conn.send(msg.ClientKeyExchange)
            # conn.send(msg.ChangeCipherSpec)
